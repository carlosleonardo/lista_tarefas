<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/GestorTarefas.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/GestorTarefas.cpp" />
              <option name="originalContent" value="//&#10;// Created by S861321135 on 28/07/2025.&#10;//&#10;&#10;#include &quot;GestorTarefas.h&quot;&#10;&#10;#include &lt;iostream&gt;&#10;#include &lt;fmt/printf.h&gt;&#10;&#10;#include &quot;Util.h&quot;&#10;&#10;GestorTarefas::GestorTarefas() {&#10;    servicoTarefas = std::make_unique&lt;ServicoTarefas&gt;();&#10;    proximoId = 1; // Inicia o ID das tarefas a partir de 1&#10;}&#10;&#10;void GestorTarefas::adicionarTarefa() {&#10;    std::string titulo;&#10;    while (titulo.empty()) {&#10;        fmt::print(&quot;Digite o título da tarefa: &quot;);&#10;        std::getline(std::cin, titulo);&#10;    }&#10;    servicoTarefas-&gt;adicionar(static_cast&lt;int&gt;(proximoId++), titulo);&#10;    fmt::print(&quot;Tarefa '{}' adicionada com sucesso!\n&quot;, titulo);&#10;}&#10;&#10;void GestorTarefas::listarTarefas() const {&#10;    const auto tarefas = servicoTarefas-&gt;obterTarefas();&#10;    if (tarefas.empty()) {&#10;        fmt::print(&quot;Nenhuma tarefa encontrada.\n&quot;);&#10;        return;&#10;    }&#10;    fmt::print(&quot;Lista de Tarefas:\n&quot;);&#10;    fmt::printf(&quot;{:&lt;5}{:&lt;30}{:&lt;10}\n&quot;, &quot;ID&quot;, &quot;Título&quot;, &quot;Finalizada&quot;);&#10;    for (const auto &amp;[id, titulo, finalizada]: tarefas) {&#10;        fmt::print(&quot;{:&lt;5}{:&lt;30}{:&lt;10}\n&quot;,&#10;                   id, titulo, finalizada ? &quot;Sim&quot; : &quot;Não&quot;);&#10;    }&#10;}&#10;&#10;void GestorTarefas::alternarTarefaFinalizada() const {&#10;    int id = 0;&#10;    while (id &lt; 1) {&#10;        fmt::print(&quot;Digite o ID da tarefa para alternar o status de finalização: &quot;);&#10;        std::cin &gt;&gt; id;&#10;        std::cin.ignore(); // Limpa o buffer de entrada&#10;        // Verifica se a tarefa existe&#10;        verificaExistencia(id);&#10;    }&#10;    servicoTarefas-&gt;alternarFinalizada(id);&#10;}&#10;&#10;void GestorTarefas::verificaExistencia(int &amp;id) const {&#10;    if (!servicoTarefas-&gt;obterTarefaPorId(id).has_value()) {&#10;        fmt::print(&quot;Tarefa com ID {} não encontrada.\n&quot;, id);&#10;        id = 0; // Reseta o ID para continuar o loop&#10;    }&#10;}&#10;&#10;void GestorTarefas::removerTarefa() const {&#10;    int id = 0;&#10;    while (id &lt; 1) {&#10;        fmt::print(&quot;Digite o ID da tarefa para remover: &quot;);&#10;        std::cin &gt;&gt; id;&#10;        std::cin.ignore(); // Limpa o buffer de entrada&#10;        // Verifica se a tarefa existe&#10;        verificaExistencia(id);&#10;    }&#10;    servicoTarefas-&gt;remover(id);&#10;    fmt::print(&quot;Tarefa com ID {} removida com sucesso!\n&quot;, id);&#10;}&#10;&#10;void GestorTarefas::alterarTarefa() const {&#10;    int id = 0;&#10;    while (id &lt; 1) {&#10;        fmt::print(&quot;Digite o ID da tarefa para alterar: &quot;);&#10;        std::cin &gt;&gt; id;&#10;        std::cin.ignore(); // Limpa o buffer de entrada&#10;        // Verifica se a tarefa existe&#10;        verificaExistencia(id);&#10;    }&#10;    std::string novoTitulo;&#10;    while (novoTitulo.empty()) {&#10;        fmt::print(&quot;Digite o novo título da tarefa: &quot;);&#10;        std::getline(std::cin, novoTitulo);&#10;    }&#10;    servicoTarefas-&gt;alterar(id, novoTitulo);&#10;    fmt::print(&quot;Tarefa com ID {} alterada para '{}'.\n&quot;, id, novoTitulo);&#10;}&#10;&#10;void GestorTarefas::salvarTarefas() const {&#10;    try {&#10;        servicoTarefas-&gt;salvarTarefas();&#10;    } catch (const std::exception &amp;e) {&#10;        fmt::print(&quot;Erro ao salvar tarefas: {}\n&quot;, e.what());&#10;        return;&#10;    }&#10;    fmt::print(&quot;Tarefas salvas com sucesso!\n&quot;);&#10;}&#10;&#10;void GestorTarefas::carregarTarefas() {&#10;    try {&#10;        servicoTarefas-&gt;carregarTarefas();&#10;    } catch (const std::exception &amp;e) {&#10;        fmt::print(&quot;Erro ao carregar tarefas: {}\n&quot;, e.what());&#10;        return;&#10;    }&#10;    // Reseta o ID para o próximo uso&#10;    proximoId = servicoTarefas-&gt;obterTarefas().size() + 1; // Reseta o ID para o próximo uso&#10;    fmt::print(&quot;Tarefas carregadas com sucesso!\n&quot;);&#10;}&#10;" />
              <option name="updatedContent" value="//&#10;// Created by S861321135 on 28/07/2025.&#10;//&#10;&#10;#include &quot;GestorTarefas.h&quot;&#10;&#10;#include &lt;iostream&gt;&#10;#include &lt;fmt/printf.h&gt;&#10;&#10;#include &quot;Util.h&quot;&#10;&#10;GestorTarefas::GestorTarefas() {&#10;    servicoTarefas = std::make_unique&lt;ServicoTarefas&gt;();&#10;    proximoId = 1; // Inicia o ID das tarefas a partir de 1&#10;}&#10;&#10;void GestorTarefas::adicionarTarefa() {&#10;    std::string titulo;&#10;    while (titulo.empty()) {&#10;        fmt::print(&quot;Digite o título da tarefa: &quot;);&#10;        std::getline(std::cin, titulo);&#10;    }&#10;    servicoTarefas-&gt;adicionar(static_cast&lt;int&gt;(proximoId++), titulo);&#10;    fmt::print(&quot;Tarefa '{}' adicionada com sucesso!\n&quot;, titulo);&#10;}&#10;&#10;void GestorTarefas::listarTarefas() const {&#10;    const auto tarefas = servicoTarefas-&gt;obterTarefas();&#10;    if (tarefas.empty()) {&#10;        fmt::print(&quot;Nenhuma tarefa encontrada.\n&quot;);&#10;        return;&#10;    }&#10;    fmt::print(&quot;Lista de Tarefas:\n&quot;);&#10;    fmt::print(&quot;{:&lt;5}{:&lt;30}{:&lt;10}\n&quot;, &quot;ID&quot;, &quot;Título&quot;, &quot;Finalizada&quot;);&#10;    for (const auto &amp;[id, titulo, finalizada]: tarefas) {&#10;        fmt::print(&quot;{:&lt;5}{:&lt;30}{:&lt;10}\n&quot;,&#10;                   id, titulo, finalizada ? &quot;Sim&quot; : &quot;Não&quot;);&#10;    }&#10;}&#10;&#10;void GestorTarefas::alternarTarefaFinalizada() const {&#10;    int id = 0;&#10;    while (id &lt; 1) {&#10;        fmt::print(&quot;Digite o ID da tarefa para alternar o status de finalização: &quot;);&#10;        std::cin &gt;&gt; id;&#10;        std::cin.ignore(); // Limpa o buffer de entrada&#10;        // Verifica se a tarefa existe&#10;        verificaExistencia(id);&#10;    }&#10;    servicoTarefas-&gt;alternarFinalizada(id);&#10;}&#10;&#10;void GestorTarefas::verificaExistencia(int &amp;id) const {&#10;    if (!servicoTarefas-&gt;obterTarefaPorId(id).has_value()) {&#10;        fmt::print(&quot;Tarefa com ID {} não encontrada.\n&quot;, id);&#10;        id = 0; // Reseta o ID para continuar o loop&#10;    }&#10;}&#10;&#10;void GestorTarefas::removerTarefa() const {&#10;    int id = 0;&#10;    while (id &lt; 1) {&#10;        fmt::print(&quot;Digite o ID da tarefa para remover: &quot;);&#10;        std::cin &gt;&gt; id;&#10;        std::cin.ignore(); // Limpa o buffer de entrada&#10;        // Verifica se a tarefa existe&#10;        verificaExistencia(id);&#10;    }&#10;    servicoTarefas-&gt;remover(id);&#10;    fmt::print(&quot;Tarefa com ID {} removida com sucesso!\n&quot;, id);&#10;}&#10;&#10;void GestorTarefas::alterarTarefa() const {&#10;    int id = 0;&#10;    while (id &lt; 1) {&#10;        fmt::print(&quot;Digite o ID da tarefa para alterar: &quot;);&#10;        std::cin &gt;&gt; id;&#10;        std::cin.ignore(); // Limpa o buffer de entrada&#10;        // Verifica se a tarefa existe&#10;        verificaExistencia(id);&#10;    }&#10;    std::string novoTitulo;&#10;    while (novoTitulo.empty()) {&#10;        fmt::print(&quot;Digite o novo título da tarefa: &quot;);&#10;        std::getline(std::cin, novoTitulo);&#10;    }&#10;    servicoTarefas-&gt;alterar(id, novoTitulo);&#10;    fmt::print(&quot;Tarefa com ID {} alterada para '{}'.\n&quot;, id, novoTitulo);&#10;}&#10;&#10;void GestorTarefas::salvarTarefas() const {&#10;    try {&#10;        servicoTarefas-&gt;salvarTarefas();&#10;    } catch (const std::exception &amp;e) {&#10;        fmt::print(&quot;Erro ao salvar tarefas: {}\n&quot;, e.what());&#10;        return;&#10;    }&#10;    fmt::print(&quot;Tarefas salvas com sucesso!\n&quot;);&#10;}&#10;&#10;void GestorTarefas::carregarTarefas() {&#10;    try {&#10;        servicoTarefas-&gt;carregarTarefas();&#10;    } catch (const std::exception &amp;e) {&#10;        fmt::print(&quot;Erro ao carregar tarefas: {}\n&quot;, e.what());&#10;        return;&#10;    }&#10;    // Reseta o ID para o próximo uso&#10;    proximoId = servicoTarefas-&gt;obterTarefas().size() + 1; // Reseta o ID para o próximo uso&#10;    fmt::print(&quot;Tarefas carregadas com sucesso!\n&quot;);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>